//---------------------------AI Talk--------------------------
//This is where all their random conversations are stored. 

//If you see a big block of commented text you want to uncomment, highlight the text and then hit ctrl-shift-k in Notepad++ and that should uncomment it. Mostly this is intended for advanced users.

/*
This file has...

AiTalk
RandomTalk
any chains you set up
HourCheck
OnMinuteChange
OnSecondChange
OffscreenTalk
EndOffscreenTalk
OnSurfaceRestore
OnKeyPress
*/

//--OnAiTalk
//Leave this alone. This is mostly setting up whether or not dialogue is in a chain before it displays.

OnAiTalk
 {
	if RAND(100) < communicateratio
 	{
 		StartCommunicate
	}
 	else
	{
			if CHAIN.IDName == "" {
 				lastTalk = RandomTalk
			}
			else {
				lastTalk = ChainTalk
			}
			lastTalk
	}
 }
 
 
 //*********************Advanced User Info*******************************

//--Mikiretalk, or the Off-Screen Boundary Check--

//Basically, this flag checks to see if the ghost is off the screen and haves them say something to the user to get them to move them back on screen. If you want to enable this, it'll take a bit of fussing around. You're going to want to add the mikireflag check into OnAiTalk above. You can see how so below. Then you'll have to follow up on the flag check later down at OnSecondChange. Keep an eye out.

 
//
// OnAiTalk
 // {
	// if RAND(100) < communicateratio
 	// {
 		// StartCommunicate
	// }
 	// else
	// {
 		// if mikireflag == 0
		// {
			// if CHAIN.IDName == "" {
 				// lastTalk = RandomTalk
			// }
			// else {
				// lastTalk = ChainTalk
			// }
			// lastTalk
		// }
 		// else
		// { 
		// MikireTalk
 		// }
	// }
 // }
//***********************************************************************


//--RandomTalk 
 //Alright, here we go!

//nonoverlap_pool should make it so all your dialogue has an equal probability of being called, and it will do each line of dialogue before repeating them.

RandomTalk : nonoverlap_pool
{
	
	"\1\s[10]\w8\0\s[4]...\w4 Damn dude,\w2 do you ever take a break from that thing?\w4\1\s[10]Don't call me 'dude'.\w4\0\s[1]\w8\w8\w6\nAre you even gonna answer the question?\1\s[11] \n\nYes,\w2 I take breaks Kai.\e"
	
	"\1\s[10]\w8\0\s[1]What do you even do on that thing?\1\w8Maybe if you were actually proficient in your work you'd know.\w8\0\s[3]\n I AM proficient im my work!\1\s[11]\nNo you're not. Don't even try that.\w8\0\s[6]\n\nWhatever...\e"
	
	
	//--Chains
	//Chain dialogue is unique. A dialogue chain consists of multiple bits of dialogue that get called in order over a period of time.
	
	//"\0\s[0]This is the first part of a chained dialogue.\w8\1\s[10]Second part to come when we next speak.\e:chain=achain"
	
	//Note here that instead of ending the dialogue with the normal end tag of \e, it ends with \e:chain=achain. Once a dialogue has entered a chain, they won't say any other random dialogue until the chain is finished.
	
	
	
	if nowshell == "master" //This checks to see what shell they're currently using. You may remember this value being defined back in bootend.dic.
	{
	//"\0\s[0]Here is dialogue related to the default shell.\w8\1\s[10]You can use this to comment on clothing your ghost is wearing.\e"
	
	//"\0\s[0]Here is more dialogue related to the default shell.\e"
	}
	
	//You can also put in multiple ifs checking for the same thing to vary the responses.
	if nowshell == "Hypothetical Shell that doesn't actually exist"
	{
	//"\0\s[0]This is dialogue related to a shell we don't actually have.\w8\1\s[18]Unless it somehow pops into existence.\e"
	
	//"\0\s[0]This is more dialogue related to a hypothetical shell we don't actually have.\w8\1\s[19]It's not happening.\e"
	}

	
	//"\1\s[10]This is generic dialogue.\w8\0\s[0]This can be replaced with whatever you want.\e"
	
	//"\1\s[10]This is more generic dialogue to be replaced.\w8\0\s[0]Do whatever you like with it.\e"
	
	
	if month >= 12
	{
		"\0\s[0]This is dialogue for December.\w8\1\s[18]A cold month?\e"
		
		"\0\s[0]This is more dialogue for December.\w8\1\s[18]Still cold?\e"
	}
		
	//This if checks what day of the week it is.
	if weekday == 1
	{
		"\0\s[0]This is dialogue for Monday.\w8\1\s[10]Yup.\e"
		
		"\0\s[0]This is more dialogue for Monday.\w8\1\s[10]That it is.\e"
	}
	
	//This if checks for the time of day as defined in bootend.dic. Do you remember the words used for each chunk of time in GetTimeSlot? These are the same words!
	if timeslot == "earlymorning"
	{
		"\0\s[0]This is dialogue for the early morning.\w8\1\s[10]Yup.\e"
		
		"\0\s[0]This is more dialogue for early morning.\w8\1\s[10]That it is.\e"
	}
	
	
	
	//--Double Envelopes
	//If you've gone through word.dic, you may remember a list with two sets of values on each line. This is how you would call something like that! Technically, what I call a double envelope is really an array, or a stored list of values. You can pull certain things out of that list as you need, although it requires some specific formatting. For this example, we'll use the double envelope that cindysuke made that has a Korean word and its definition. This can be a bit complicated, so pay close attention.
	
	//note that this is enclosed in its own set of brackets
	{
	_korean = lessonkor //Here, the envelope "lessonkor" (which is in word.dic) is stored as a new temporary value called _korean. You can name the new value anything you like. As a reminder, when coding, it goes "4 = 2 + 2" and not "2 + 2 = 4". The result always comes first!
	//If you look at lessonkor in word.dic, you'll see it goes "Korean word, meaning". So "Korean word" is the first value in that array, and "meaning" is the second. Arrays always start at 0, as a note.
	_korword = _korean[0] //Now we make a temporary value called "_korword", which is what will store the Korean word. Since the Korean word is the first value in the array _korean which we just defined, then we can pull that value from the array with _korean[0]. [0] is telling it which entry in the array to take - in this case, the first one (again, arrays start at 0).
	_kormean = _korean[1] //Now we make a temporary value called "_kormean", which is what will store the meaning of the Korean word. This is the second value in the array, so we can pull it out of _korean by using _korean[1].
	
	//Now we put it all together!
	//"\1\s[10]Here is an example of a double envelope. The Korean word is %(_korword).\w8\0\s[0]The word means %(_kormean).\e"
	
	//As you can see here, we then use the values we set above for _korword and _kormean up there in the dialogue as our new envelopes. If you're planning on using a double envelope/array like this, study how this works very carefully! If you're good with arrays, you can do a lot with this kind of thing, but I must admit I am terrible with arrays and they're still hard for me to wrap my head around, so I don't have much advice on how to do that kind of thing.
	//The underscores in front of korword and kormean mean that the value is temporary, and will disappear when the dialogue has finished. More on this kind of thing on the coding page of the walkthrough.
	
	//Additional Note - You can't test this kind of dialogue in Script Input. You'll have to wait until it comes up naturally in your ghost's random dialogue.
	}
	
		
	//--Multiple Responses
	
	{ 
	
	//"\0\s[0]I am asking you a generic question, Triangle. Generic question?\w8\1\s[10]"
	--
	//"This is my first response."
	//"This is my second response."
	//"This is my third response."
	//"This is my fourth response."
	//"This is my fifth response."
	//"This is my sixth response."
	-- 
	//"\w8\0\s[0]\n\n[half]"
	-- 
	//"First response to your response."
	//"Second response to your response."
	//"Third response to your response."
	//"Fourth response to your response."
	-- 
	"\e"
	}
	
	{
	//"\0\s[0]Say either black or white.\w8\1\s[10]What if I say " 
	-- 
	//"green"
	//"red"
	//"purple"
	//"orange"
	//"yellow"
	//"\s[18]magenta" 
	-- 
	//" instead?\w8\0\n\n[half]\s[9]Then you're not really cooperating.\w8\1\n\n[half]\s[15]Sounds about right.\e"
	}
	
	//"\0\s[0]\f[height,20]These words are really large.\f[height,default]\w8\1\s[10]These words are a normal size. \w8\f[height,6]These words are small.\f[height,default]\e"
	
	//"\0\s[0]\f[strike,true]These words are struck out.\f[strike,default]\w8\1\s[10]\f[sub,true]These words are a subscript.\f[sub,false] \f[sup,true]These words are a superscript.\f[sup,false] \f[underline,true]These words are underlined.\f[underline,default] \f[bold,true]These words are bold.\f[bold,false] \f[italic,true]These words are italic.\f[italic,false] \f[color,186,146,112]These words are a color.\f[color,default] This tag would return to default.\f[default]\e"
	
	//For the \f[color] tag, the three colors listed are the RGB values of the color you want to use for your text. Change them to whatever color you want to use. \f[default] can be an easy way to quickly go back to the default word setting in your balloon after messing with colors and effects a lot.
	
	//"\0\s[0]Here's a link to a website. \_a[http://www.website.com/]Right here.\_a\e"
	
	//"\0\s[3]\1\s[15]\_sWe are saying this dialogue at the same time.\e" 
	
	//This dialogue uses a unique tag, \_s. \_s makes it so both characters will speak the same words at the same time. Try it in Script Input to see how it works. I talk about it a little more on the walkthrough page for scripting.
}


//--Chains
//Each chain function will go through each part of the chain in order even if it's in one function, until it goes to \e:chain=end which will end the chain, as you could probably guess. So you can put the entire chain dialogue into one place.

achain
{{CHAIN
	//this will happen the first time the chain is called
	"\0\s[0]Here is the second part of the chain.\w8\1\s[10]Will there be more?\e"
	
	//they will then go to this dialogue next
	"\0\s[0]This is the third part of chained dialogue.\1\w8\s[10]This will lead to a fourth part.\e"
	
	//this will be the last piece of dialogue in the chain, then they will go back to their normal dialogue
	"\0\s[0]This is the fourth piece of chained dialogue.\1\w8\s[10]This is the end.\e:chain=end"
}}CHAIN

introchain
{{CHAIN
	"\0\s[0]Test!\e=chain=end"
}}CHAIN
//Note also it ends with \e:chain=end, basically ending the chain.


//-OnMinuteChange
//These are time-related bits of dialogue for your ghost to say. If any of them look interesting, uncomment them! I commented them out for simplicity's sake, but it's up to you if you want to use them or not!

//OnMinuteChange
//{
//HourCheck
//--
//if mikireflag == 1
// 	{
// 		MikireTalk
//	}
//}


//Keeps track of if an hour has passed. Just ignore this.
HourCheck
{
if passmin >= 59
	{
		passmin = 0
		passhour = passhour + 1
	}
}


OnMinuteChange //This is what will trigger time-based dialogue for your Ghost.
 {
	HourCheck //checks to see if an hour has passed, ignore it
	--
 	// if minute == 0 //These ifs will check what time it is. Here, it's seeing if the minute equals zero...
	// {
 		// if hour == 12 //And the hour equals 12, meaning it's noon. You can change this to some other hour if you want.
		// {
 			// "\0\s[0]It's noon.\w8\1\s[15]Let's have a showdown!\w8\0\n\n[half]\s[9]There are no corrals here, dude.\e"
			// //Replace with appropriate dialogue as you want.
		// }
 		// elseif hour == 0 //If the hour is zero, aka midnight. Again, you can change this to whatever hour you want to check for. This section is flexible! You can also add more elseifs if you want to check for other hours.
		// {
 			// "\0\s[0]It's midnight!\e"
 			// "\0\s[0]This is another bit of dialogue for midnight.\w8\1\s[10]BooooOoooOOOooOOOOo.\e"
 			// "\0\s[0]This is the third bit of dialogue for midnight.\e"
			// //Then replace the dialogue with what's appropriate.
		// }
		// else
		// {
			// "\0\s[0]It's %(hour12)'o clock.\e"
			// //%(hour12) stores the time. This is a general top of the hour notification. I personally like this because it helps me keep track of time when I've been working on something, so when a ghost is all "Hey it's 3 o clock" I can be like woah really when did that happen. If you think this is annoying though, you can just delete this bit of dialogue to leave this else statement blank, or leave "" in here instead.
		// }
	// }
	// //You can also check for more specific times! For example...
	// elseif hour == 23 && minute == 55 //this checks to see if the hour is 23 and the minutes are at 55... essentially, 11:55 pm.
	// {
		// "\0\s[0]5 minutes to midnight.\e"
		// //Replace with what you like!
	// }
	// elseif hour == 7 && minute == 30 && weekday == 0 //Here, it's checking for a specific time on a specific day. You can add things to your time checks just like this by using the AND operator, && (more about operators at the walkthrough page). This adds up to 7:30 am, Sunday. If you have a favorite TV program on at some time, you could have your ghost comment on when it comes on like this.
	// {			
		// "\0\s[0]It's 7:30 on Sunday.\e"
		// //Replace with what's appropriate.
	// }
	// //If you're not interested in these more specific checks, you can delete those last two elseifs and just leave the one for minute==0, or clear them all out as mentioned above, although leave in the HourCheck and mikireflag bits.
	
	// 
	
	
	//Advanced users who want to enable the off-screen boundary check = Remember mikireflag up in OnAiTalk? This is the flag that checks for that. You'll want to uncomment this here so it can trigger the dialogue.
	
	//Don't touch this part.
	// elseif mikireflag == 1
 	// {
 		// MikireTalk
	// }
 }

//--OnSecondChange
//Like the above, this handles what happens every time a second goes by. Most of this you will not have to touch.

OnSecondChange
 {
	if passsec == 59
 		{
	 	passsec = 0
 		passmin = passmin + 1
		}
 	else
 		{
	 	passsec = passsec + 1
		}
		
		
	//Advanced users - these next bits are related to the mikireflag and when a character is off screen. Uncomment these if you want to use this feature. 
		
	// if mikireflag == 0 && reference1 == 1 //Dialogue for putting them off the screen. You could make this a unique line if you wanted (Like "Hey! What are you doing?"), and have MikireTalk below be for if they continue to be offscreen ("Why are you leaving me out here? Help!" for example). I'll add an example bit of dialogue and comment it out, you can uncomment it and use it if you like, or just leave it out and use MikireTalk below.
	// {
		// //"\0\s[0]You've moved me off screen."
		
		// MikireTalk
	// }
	// if mikireflag == 1 && reference1 == 0 //Dialogue for coming back on the screen
	// {
		// EndMikireTalk
	// }
	// mikireflag = reference1 //reference1 is if the ghost is offscreen or not
	
	
	//This dialogue is for when the two characters are overlapping each other. Uncomment this if you want to have dialogue for it!
	
	// if reference2 == 1
	// {
 		// "\0\s[0]Me and Triangle are overlapping.\w8\1\s[19]That's strange since your resolution is %screenwidthx%screenheight, %(username). Shouldn't we have enough space?\4\e"
		
		// //You can see here the use of two envelopes, screenwidth and screenheight, to tell the user their resolution. Oddly, they are not in parentheses. I'm not sure why this is, but they don't display right otherwise. An odd quirk with these two envelopes.
		// //Note also how Triangle moves away at the end of the dialogue. This is due to the \4 tag. That will make any one character move away from the other if they are able. I talked about this tag and its counterpart tag \5 in the SakuraScript page on the walkthrough.
	// }
 }

 //---- MikireTalk ---------------------------------------------------------------------
 //MikireTalk is dialogue for when your main character is off-screen. Like if you dragged Girl over to the side of your monitor until she was partially concealed by it. Advanced users, make sure to uncomment this along with all the other mikire related things in here I've pointed out.
 
// MikireTalk
 // {
	// "\0\s[0]I'm off the screen.\w8\1\s[10]You can push Ctrl-Shift-F12 to bring her back."
	// //Note the hotkey combo Triangle mentions. He's telling the truth, that should bring her back on the screen.
 // }

 //----EndMikireTalk--------------------------------------------------------------------
 //For after you bring the character back on screen.
 
// EndMikireTalk
 // {
	// "\0\s[0]I'm no longer off the screen.\w8\1\s[19]What a shame.\w8\0\s[9]\n\n[half]Shut up.\e"
 // }


//**** OnSurfaceRestore


OnSurfaceRestore
 {
 	//if reference0 == 4 || reference0 == 6 //This is checking what poses they are in. This looks to see if Girl is in pose 4 or pose 6, since she is reference0.
 	//{
 	//"\1\s[10]You're in a sad pose.\w8\0\s[0]I'll go back to normal then.\e"
 	//}
 	//elseif reference1 == 14 || reference1 == 16 //This is doing the same but for Triangle, since he's reference1. It looks to see if he's in pose 14 or post 16.
 	//{
 	//"\0\s[0]You look sad.\w8\1\s[10]I'll go back to normal.\e"
 	//}
 	//else
 	//{
	"\0\s[0]\1\s[10]\e"
	//}
 }

 
 //--OnKeyPress
 //This defines the hotkeys your ghost will use.
 
OnKeyPress
{
	if reference0 == "t"
	{
	OnAiTalk
	}
	elseif reference0 == "r"
	{
	OnLastTalk
	}
	elseif reference0 == "f1"
	{
	"\![open,readme]"
	}
}