//---------------------------Menus--------------------------
//This .dic file is primarily concerned with the double-click menus for each of your ghosts.

//If you see a big block of commented text you want to uncomment, highlight the text and then hit ctrl-shift-k in Notepad++ and that should uncomment it. Mostly this is intended for advanced users.


/*This file has...

OpenSakuraMenu
MenuRun
OnLastTalk
GetWeekDay
GetAP
nowmin
nowhour
Select.BACKTOMENU
Delete on/off
Test variable
*/


//--OpenSakuraMenu

OpenSakuraMenu
{
		"\0\s[5]\b2Heeyyyyyyyyy~"
		"\0\s[7]\b2Yea?"
		"\0\s[2]\b2Hey!"
		--
		MenuRun
}

//--MenuRun
//As you just saw above. This actually fills out the rest of the menu.

MenuRun : all
 {	
 	wd = GetWeekDay
 	ap = GetAP
	//It's putting together the information to display the time at the bottom of the balloon.
	--
	"\n\n\_q\b2" // \_q means quick session, meaning all the text from this point on will display instantly instead of a few letters at a time like normal ghost dialogue.
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty (!= means "does not equal").
	{
	  "\![*]\q[Repeat Last Dialogue,OnLastTalk]\n\n[half]"
	}
	--
 	"\![*]\q[Say something,OnAiTalk]\n"
	
	//"\![*]\q[Say something 2,OnAiTalk]\n"
	
	//Advanced users, you can add multiple captions for any option you add to a menu you make just like this, as long as you separate it from the other options into its own section with two dashes above and below. Note that you can't do this if the Function above has ": all" after it, since that will put every potential option in. You'll have to set it your menu up differently to take --s into account. I commented it out here because of ": all" above, but you can see the basic idea.
	--
	"\![*]\q[Config Menu,configmenu]\n"
	"\![*]\q[Functions,dosomething]\n\n[half]"
 	"\![*]\q[Nevermind,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
}

//Leave this alone
OnLastTalk 
{
"%(lastTalk)\e"
}

//This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{"AM"}
 	else
 		{"PM"}
}

nowhour
{
	if hour12 == 0; "1"
	else; "%(hour12)"
}

nowmin
{
	if minute >= 0 && minute <=9; "0%(minute)"
	else; "%(minute)"
}


//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.

Select.BACKTOMENU
	{
		MenuRun
	}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}


//--TalkConfig
//I commented out birthday and pronoun options, you can uncomment them if you want to add them back.

TalkConfig : all
{
	"\0\b[2]\_q\" 
	
	
	"f[bold,1]Your name:\f[bold,0] %(username) \f[sup,1](\q[Change it?,TEACHNAME])\f[sup,0]\n"
	
	
	//If you want your user to set their pronouns, you can uncomment this menu option by removing the two slashes in front. Read more on the walkthrough about commenting.
	
	//"\f[bold,1]Your pronouns:\f[bold,0] %(heshe)/%(himher)/%(hisher) \f[sup,1](\q[Change them?,TEACHPRONOUN])\f[sup,0]\n"
	
	
	//If you want your user to be able to set their birthday, you can uncomment this menu option.
	
	//"\f[bold,1]Your birthday:\f[bold,0] %(birthdayprint) \f[sup,1](\q[Change it?,TEACHBDAY])\f[sup,0]\n"
	
	
	
	"\n\f[bold,1]Talk Rate:\f[bold,0] - every %(talktime) \f[sup,1](\q[Change it,talkinter])\f[sup,0]\n\n"
	
	
	
		{
		"\![*]Enable Uninstall? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]\n"
		}
		
	
	
	"\![*]\q[Back to the menu,BACKTOMENU]\e"
}




// ______                                                 _____ _             _   
// | ___ \                                               /  ___| |           | |  
// | |_/ / __ ___  _ __   ___  _   _ _ __  ___   ______  \ `--.| |_ __ _ _ __| |_ 
// |  __/ '__/ _ \| '_ \ / _ \| | | | '_ \/ __| |______|  `--. \ __/ _` | '__| __|
// | |  | | | (_) | | | | (_) | |_| | | | \__ \          /\__/ / || (_| | |  | |_ 
// \_|  |_|  \___/|_| |_|\___/ \__,_|_| |_|___/          \____/ \__\__,_|_|   \__|
                                                                               
                                                                               



//This and the next few set up the pronouns, as you can see by the linkedfunction names. If you're not going to add this feature, you can ignore these. I marked where the pronoun section begins and ends with some ascii banners. :3

Select.TEACHPRONOUN : all
{
	"\0\s[0]What pronouns do you want?\w5\n\n[half]\_q"
	"\![*]\q[He-His-Him,choicemasc]\n"
	"\![*]\q[She-Her-Her,choicefem]\n"	
	"\![*]\q[They-Their-Them,choiceneither]\e"
}

Select.choicemasc
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	"\0\s[0]The pronouns are now he him and his.\e"
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	"\0\s[0]The pronouns are now she her and her.\e"
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	hesshes = "they're"
	--
	"\0\s[0]The pronouns are now they them and their.\e"
}

//Here are some examples of these envelopes in use.
//"%(heshe) left that there."
//"%(hisher) work is really cool."
//"I'll ask %(himher) later."
//"%(hesshes) really good at it."

//These envelopes only apply if the pronouns are set! If the user can't set their pronouns, that then you don't have to think about these envelopes.



// ______                                                 _____          _ 
// | ___ \                                               |  ___|        | |
// | |_/ / __ ___  _ __   ___  _   _ _ __  ___   ______  | |__ _ __   __| |
// |  __/ '__/ _ \| '_ \ / _ \| | | | '_ \/ __| |______| |  __| '_ \ / _` |
// | |  | | | (_) | | | | (_) | |_| | | | \__ \          | |__| | | | (_| |
// \_|  |_|  \___/|_| |_|\___/ \__,_|_| |_|___/          \____/_| |_|\__,_|
                                                                        
                                                                        






//These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}




  // ____  _      _   _         _                       ____  _             _   
 // | __ )(_)_ __| |_| |__   __| | __ _ _   _          / ___|| |_ __ _ _ __| |_ 
 // |  _ \| | '__| __| '_ \ / _` |/ _` | | | |  _____  \___ \| __/ _` | '__| __|
 // | |_) | | |  | |_| | | | (_| | (_| | |_| | |_____|  ___) | || (_| | |  | |_ 
 // |____/|_|_|   \__|_| |_|\__,_|\__,_|\__, |         |____/ \__\__,_|_|   \__|
                                     // |___/                                   


//This next set of functions handles inputting the user's birthday. If you don't want this to be a feature, you can ignore all of this. I marked where the birthday code starts and ends for you with some good old-fashioned ascii banners. :3

Select.TEACHBDAY
	{	
		"\0\s[0]What month were you born? \w8Name or number is fine.\![open,inputbox,OnUserBornMonth,-1]\e"
		
		//*********************Advanced User Info*******************************
		//I'm going to break down the tag there at the end of the sentence so you know what it's doing. Basically, \! means a function is going to happen, open tells it to open something, inputbox tells it to open an input box, and OnUserBornMonth is the function the input box will be linked to, which is just below here. -1 means the input box should not time out. If you want to add input boxes to some new function for whatever reason, you should follow this basic format.
		//On a related note, you can raise any function at the end of any piece of dialogue by using this format - \![raise,InsertFunctionName]. This can be handy for testing things if the function is hard to get to run otherwise.
		//***********************************************************************
	}

//--OnUserBornMonth
//This takes the value that the user put into the input box above and evaluates it.

OnUserBornMonth
{
	_tempmonth = TOSTR(reference0) //this stores what the user put in as a variable called _tempmonth
	_tempmonth = TOLOWER(_tempmonth) //changes it to lowercase
	
	//this is attaching the right value to the input from the user
	if _tempmonth == "january" || _tempmonth == "1" {bornmonth = 1; bornmonthprint = "January"}
	elseif _tempmonth == "february" || _tempmonth == "2" {bornmonth = 2; bornmonthprint = "February"}
	elseif _tempmonth == "march" || _tempmonth == "3" {bornmonth = 3; bornmonthprint = "March"}
	elseif _tempmonth == "april" || _tempmonth == "4" {bornmonth = 4; bornmonthprint = "April"}
	elseif _tempmonth == "may" || _tempmonth == "5" {bornmonth = 5; bornmonthprint = "May"}
	elseif _tempmonth == "june" || _tempmonth == "6" {bornmonth = 6; bornmonthprint = "June"}
	elseif _tempmonth == "july" || _tempmonth == "7" {bornmonth = 7; bornmonthprint = "July"}
	elseif _tempmonth == "august" || _tempmonth == "8" {bornmonth = 8; bornmonthprint = "August"}
	elseif _tempmonth == "september" || _tempmonth == "9" {bornmonth = 9; bornmonthprint = "September"}
	elseif _tempmonth == "october" || _tempmonth == "10" {bornmonth = 10; bornmonthprint = "October"}
	elseif _tempmonth == "november" || _tempmonth == "11" {bornmonth = 11; bornmonthprint = "November"}
	elseif _tempmonth == "december" || _tempmonth == "12" {bornmonth = 12; bornmonthprint = "December"}
	
	else //if the month isn't a valid month, like 32 or something.
	{
			"\0\s[0]That's not a valid month. Try again."
			--
			"\![open,inputbox,OnUserBornMonth,-1]\![set,balloontimeout,-1]\e"
	}
	--
	//If it's a valid month
	
	"\0\s[0]So you were born in %(bornmonthprint).\n\w8What day was it?"
	--
	"\![open,inputbox,OnUserBornDay,-1]\![set,balloontimeout,-1]\e"
}

//This adds an appropriate suffix to the number for the day. No need to mess with this.

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{	"%(bornday)st"	}
	elseif bornday == 2 || bornday == 22
	{	"%(bornday)nd"	}
	elseif bornday == 3 || bornday == 23
	{	"%(bornday)rd"	}
	else
	{	"%(bornday)th"	}
}	

//--OnUserBornDay
//This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it.

OnUserBornDay
{
	_tempday = reference0 //storing the input in _tempday
	_tempday = TOLOWER(_tempday) //changes it to lowercase
	_tempday = REPLACE(_tempday,"st","") //if the user types something like 2nd, 3rd, etc, this will make it just the number. It'll just add the suffix back later on the one that actually shows.
	_tempday = REPLACE(_tempday,"nd","")
	_tempday = REPLACE(_tempday,"rd","")
	_tempday = REPLACE(_tempday,"th","")
	_tempday = TOINT(_tempday) //Converts it to an integer
	
	if ((bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12) && _tempday >= 1 && _tempday <= 31) || (bornmonth == 2 && _tempday >= 1 && _tempday <= 29) || ((bornmonth == 4 || bornmonth == 6 || bornmonth == 9 || bornmonth == 11) && _tempday >= 1 && _tempday <= 30) //This ugly function checks if the day falls into a valid range. If it does, we set some variables and continue down.
	{
		bornday = _tempday
		borndayprint = Printday
		userbirthday = "%(bornmonth)month %(bornday)day"
		birthdayprint = "%(bornmonthprint) %(borndayprint)"
		
		"%(birthchecked)"
	}
	else
	{
		"\0\s[0]That's not a valid day. Try again."
		--
		"\![open,inputbox,OnUserBornDay,-1]\e"
	}	
}

//--birthchecked

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			"\0\s[0]It's the user's birthday.\w8\1\s[10]Happy birthday, %(username).\e"
			
		}
	elseif userbirthday == "12month 25day"
		{
			"\0\s[0]The user was born on Christmas.\w8\1\s[10]Happy birthday, %(username). \w5\s[15]AND JESUS!\w8\0\s[9]\n\n[half]We're supposed to be a blank template, knock it off before we get in trouble.\e"
		}
	else //if the birthday is not listed above.
		{
			"\0\s[0]Your birthday is %(bornmonthprint) %(borndayprint). We'll remember.\e"
		}
}



  // ____  _      _   _         _                       _____           _ 
 // | __ )(_)_ __| |_| |__   __| | __ _ _   _          | ____|_ __   __| |
 // |  _ \| | '__| __| '_ \ / _` |/ _` | | | |  _____  |  _| | '_ \ / _` |
 // | |_) | | |  | |_| | | | (_| | (_| | |_| | |_____| | |___| | | | (_| |
 // |____/|_|_|   \__|_| |_|\__,_|\__,_|\__, |         |_____|_| |_|\__,_|
                                     // |___/                             







//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.


Select.talkinter : all
 	{
 		"\0\s[0]\b2How often should we speak?\w8\1\s[10]The interval is currently set to %(talktime)."
		
 		"\0\n\n[half]"
 		"\![*]\q[Every 30 seconds,TALKMAX]\n"
		"\![*]\q[Every minute,TALKHIGH]\n"
 		"\![*]\q[Every 3 minutes,TALKNORMAL]\n"
		"\![*]\q[Every 5 minutes,TALKPOOR]\n"
 		"\![*]\q[Don't speak,TALKNONE]\n\n[half]"
		"\![*]\q[Don't change,TalksTill]\e"
	}


Select.TalksTill
	{
		"\0\s[0]No change to the talk rate.\e"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talktime = "30 seconds" //this sets up the envelope properly
		aitalkinterval = 30 //this changes the actual rate
		
 		"\0\s[0]We will speak every 30 seconds.\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "minute"
		aitalkinterval = 60
		
 		"\0\s[0]We will speak every minute.\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "3 minutes"
		aitalkinterval = 180
		
 		"\0\s[0]We will speak every three minutes.\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talktime = "5 minutes"
		aitalkinterval = 300
		
 		"\1\s[10]We will speak every five minutes.\e"
	}

//If the user chooses to not have them speak.
Select.TALKNONE
	{
 		talktime = "...actually we won't talk at all"
		aitalkinterval = 0
		
		"\0\s[0]We will not speak.\e"
	}



//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic.
Select.TEACHNAME
	{
		OnTeachName	
	}


//If the user selects cancel in a menu.
Select.CANCEL
	{
		"\0\s[0]This is a cancel message.\e"
		
		"\0\s[0]This is another cancel message.\e"
 	}


FunctionMenuIntros : nonoverlap
{			
		"\0\s[0]\b2This is the first function menu intro.\n\n"
 		"\0\s[0]\b2This is the second function menu intro.\n\n"
		"\0\s[0]\b2This is the third function menu intro.\n\n"	
}

Select.dosomething : all
{
 		FunctionMenuIntros	
		
		--
		
 		"\![*]\q[Open Calendar,CALENDAR]\n"
		"\![*]\q[Check Email,MailCheck]\n"
		"\![*]\q[Open SSP Preferences,sspconfig]\n"		
		"\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n"		
		"\![*]\q[System Information,ChoiceSystemInformation]\n\n"
 		"\![*]\q[Back to main menu,BACKTOMENU]\e"
}

//When the user clicks Open Calender.
Select.CALENDAR
{
	"\0\s[0]Opening the calender.\w8\![open,calendar]\e"
}

//When the user chooses SSP preferences.
Select.sspconfig
{
	"\0\s[0]Opening the SSP config menu.\w8\![open,configurationdialog]\e"
}


//If the user chooses to empty the recycle bin.

Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//Don't touch this line. for those curious, it's referencing a SAORI, which are optional user-made plug-in dlls you can download to enable different functions on your ghost.
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]Triangle, go check the recycle bin.\w8\1\s[19]Fine.\w8\w8\s[-1]\w8\w8\w8\w8\w8\1\s[10]\cIt was empty.\e"
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[0]Emptying the recycle bin.\w8\1\s[19]I'm going.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cDone.\e"
		
		"\0\s[0]This is the second recycle bin emptying dialogue.\w8\1\s[19]I'm going.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\1\s[10]\cDone.\e"
		
		//Somewhat similar to the above, but notice the \![raise],OnGarbagecanEmpty] tag in there. That's what actually empties the recycle bin, so make sure you don't delete that tag.
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
	{
		"\![biff]\e"
	}


	
//---- OnChoiceTimeout ---------------------------------------------------------
//If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue.

OnChoiceTimeout
 {
	"\0\s[0]The menu has timed out.\e"
 }

 
//---- Secondary Character Menu ---------------------------------------------------------

KeroMenuIntros : nonoverlap
{
	if vezzheart >= 20
	{
		"\1\b[2]"
	
		--
	
		"\s[10]Mhmmm?"
		"\s[12]What is it?"
		"\s[10]Uh-huh?"
	}
	
	else
	{

		"\1\b[2]"
		
		--
	
		"\s[12]...\w4 What?"
		"\s[11]... \w8\s[12]Keep it quick, okay?"
		"\s[11]... \w8\f[bold,true]What.\f[bold,false]"
	}
}

OpenKeroMenu : all
 {
	KeroMenuIntros

	--
	
	"\n\n[half]"
	"\![*]\q[Update,keroupdatecheck]\n"
 	"\![*]\q[Bug report,bugreport]\n\n"
	
	"\![*]\q[Test variable,testvariable]\n\n"
	
	"\![*]\q[Nothing,keroCANCEL]\e"
}


//If you click cancel. Replace dialogue as you want.
Select.keroCANCEL
{
	if vezzheart >= 20
	{
		"\1\s[10]Good.\e"
		"\1\s[10]'Kay.\e"
	}
	
	else
	{
		"\1\s[12]Good. \w4Leave me alone.\w8\s[10]\e"
		"\1\s[12]Good. \w4\s[10]I have better things to do then talk to you.\e"
		"\1\s[10]Stop wasting my time, \w4please.\e"
	}
}

//This is when they select bug report.
Select.bugreport
{
"\1\s[10]This is the bug report dialogue. \w5Report bugs to youremailaddress@emailprovider.com. \w5We were downloaded from \_a[http://www.whereveryoupostedthem.com/]some place\_a.\e"
}

//When clicked, this will automatically tell the ghost to check for updates. More detail on updates in etc.dic. 
Select.keroupdatecheck
{
	"\1\s[11]\f[bold,true]Ughhh... \f[bold,false]\w8\s[10]Sure,\w1 whatever.\w8\![updatebymyself]\e"
}

//--Test Variable --------------------------------------------------------
//You can also use this to test functions as I mentioned above by adding \![raise,function] at the end of it, although you can do this with Script Input as well.

Select.testvariable
{
	"\1\s[10]Testing.\e"
}
